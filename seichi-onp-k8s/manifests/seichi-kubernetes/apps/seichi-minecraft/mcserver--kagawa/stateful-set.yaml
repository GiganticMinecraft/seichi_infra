apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    reloader.stakater.com/auto: "true"
  labels:
    app: mcserver
    mcserver: kagawa
  name: mcserver--kagawa
spec:
  # レプリカ数の制御を ScaledObject に任せるため、 replicas は指定しない
  # 参考: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#replicas

  revisionHistoryLimit: 0
  serviceName: "mcserver--kagawa"
  selector:
    matchLabels:
      app: mcserver--kagawa
      mcserver: kagawa
  template:
    metadata:
      labels:
        app: mcserver--kagawa
        mcserver: kagawa
    spec:
      initContainers:
        - name: mod-downloader
          image: ghcr.io/giganticminecraft/mod-downloader:sha-6292501
          env:
            - name: MINIO_ENDPOINT
              value: seichi-private-plugin-blackhole-minio.minio:9000
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: minio-access-secret
                  key: MINIO_ACCESS_KEY
            - name: MINIO_ACCESS_SECRET
              valueFrom:
                secretKeyRef:
                  name: minio-access-secret
                  key: MINIO_ACCESS_SECRET
            - name: BUCKET_NAME
              value: seichi-plugins
            - name: BUCKET_PREFIX_NAME
              value: kagawa
            - name: DOWNLOAD_TARGET_DIR_PATH
              value: /downloaded-plugins
          volumeMounts:
            - name: mod-downloader-volume
              mountPath: /downloaded-plugins

      containers:
        - image: ghcr.io/giganticminecraft/seichi_minecraft_server_production_kagawa:1.0.0@sha256:6d8c92d702b47a60e77793377b04ca5fac296a15ce0dc5128ff782bb06a014e7
          name: minecraft
          resources:
            requests:
              memory: 2100Mi
          env:
            - name: MEMORY
              value: 2048m
            - name: EULA
              value: "TRUE"

            - name: CFG_REPLACEMENT__DISCORDSRV_TOKEN
              valueFrom:
                secretKeyRef:
                  name: mcserver--common--config-secrets
                  key: DISCORDSRV_TOKEN

            - name: CFG_REPLACEMENT__MORNING_GLORY_SEEDS_WEBHOOK_URL
              valueFrom:
                secretKeyRef:
                  name: mcserver--kagawa--config-secrets
                  key: MORNING_GLORY_SEEDS_WEBHOOK_URL

            # /downloaded-plugins: minio からダウンロードしたプラグインを配置
            # /plugins: common イメージや各サーバ個別のイメージの中にそれぞれ含まれる設定ファイルを配置
            # Note: Docker の COPY 命令は、同名ディレクトリが存在する場合は、再帰的に中身がマージされ、同名ファイルは上書きされる
            - name: COPY_PLUGINS_SRC
              value: |-
                /downloaded-plugins
                /plugins

            - name: PYROSCOPE_APPLICATION_NAME
              value: "mcserver.kagawa"

            - name: PYROSCOPE_LABELS
              value: "server=kagawa,namespace=seichi-minecraft"

          ports:
            - containerPort: 25565
              name: minecraft
            - containerPort: 18321
              name: jmx-metrics

          startupProbe:
            tcpSocket:
              port: 25565
            # 最大120秒待つ
            failureThreshold: 6
            periodSeconds: 20

          volumeMounts:
            # itzg/minecraft-server は /config に設定ファイルをマウントしておけばコピーをしてくれる。
            # 環境変数の置き換えはPrefix等の設定が必要なので、必要になったら設定するように。
            # https://github.com/itzg/docker-minecraft-server/tree/9458005b5bd78b8139e13e66c29a449a12dd6218#replacing-variables-inside-configs

            # 普通にマウントすると、auto-update (常に最新のvolume内容がコンテナ内から見える) の挙動を
            # 提供するために symlink による一時ディレクトリがマウントされることになるが、
            # itzg/minecraft-server が利用するファイル同期の仕組み (itzg/mc-image-helper) は
            # symlink を展開してしまうため、設定ファイルのパスが壊れてしまう。
            #
            # subPathを利用してマウントすればsymlinkが作られることを回避できるためそのようにしている。
            # 参考: https://stackoverflow.com/a/63114800
            # 参考: https://stackoverflow.com/a/50687707

            # /plugins, /data/plugins ディレクトリには直接マウントしないこと。
            #
            # itzg/minecraft-server は /plugins ディレクトリにプラグインを配置することで
            # /data/plugins ディレクトリに自動で配置してくれる。
            # しかし、この Pod のベースとなっている seichi_minecraft_server_base は、
            # /plugins ディレクトリに必要なプラグインの設定ファイルを展開している。
            # そのため、/plugins ディレクトリにボリュームを直接マウントすると、既存の設定ファイルがすべて上書き(削除)されてしまう。
            #
            # また、/data/plugins ディレクトリにマウントしていない理由は、
            # バックアップファイルからサーバーデータをリストアした場合、既存のデータが /data/plugins ディレクトリにも配置される。
            # しかし、この Pod が起動したときに /data/plugins ディレクトリに mod-downloader-volume をマウントしてしまうと、
            # 復元したはずのデータがすべて削除されることによって、
            # /data/plugins/[プラグイン名] ディレクトリ以下にデータを保存するプラグインのデータ整合性が失われるリスクがある。
            # これを回避するため、別のディレクトリにマウントしたうえで /data/plugins ディレクトリに mod-donwloader からダウンロードしたプラグインを配置する必要がある。
            # itzg/minecraft-server の機能で COPY_PLUGINS_SRC という環境変数で指定したディレクトリをにプラグインを配置することで、
            # これを実現するため、Pod 起動時に /data/plugins ディレクトリにプラグインを配置することができ、
            # そこに指定した /downloaded-plugins ディレクトリにマウントすることとしている。
            - name: mod-downloader-volume
              mountPath: /downloaded-plugins

      volumes:
        # mod-downloaderからプラグインをinitContainerでダウンロードしてMinecraftに受け渡すためのvolume
        - name: mod-downloader-volume
          emptyDir: {}
