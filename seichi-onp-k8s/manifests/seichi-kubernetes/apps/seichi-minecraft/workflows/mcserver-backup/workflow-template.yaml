apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: mcserver-backup-workflow-template
  namespace: seichi-minecraft
spec:
  serviceAccountName: mcserver--backup-workflow-sa
  ttlStrategy:
    secondsAfterCompletion: 86400
  entrypoint: mcserver-backup-entrypoint
  arguments:
    # NOTE: Argo Workflows の Example やドキュメントには spec.arguments.parameters で指定する parameter には必ず value を指定しているように見えるが、
    #   Argo Workflows の Parameters の定義を読みに行くと Optional であることがわかるのでこれでよい。
    #   ref: https://github.com/argoproj/argo-workflows/blob/7f0f9decf5c133ed1726e09397f4357b752c43b4/pkg/apis/workflow/v1alpha1/workflow_types.go#L886-L909
    parameters:
      - name: statefulset-name
      - name: coreprotect-db-name
      - name: persistent-volume-claim-name
  templates:
    - name: mcserver-backup-entrypoint
      inputs:
        parameters:
          - name: statefulset-name
          - name: coreprotect-db-name
          - name: persistent-volume-claim-name
      dag:
        tasks:
          - name: get-timestamp
            template: get-timestamp

          - name: patch-statefulset-to-0
            template: patch-statefulset-to-0
            inputs:
              parameters:
                - name: statefulset-name
            arguments:
              parameters:
                - name: statefulset-name
                  value: "{{inputs.parameters.statefulset-name}}"

          - name: wait-for-scale-to-0
            template: wait-for-scale-to-0
            inputs:
              parameters:
                - name: statefulset-name             
            arguments:
              parameters:
                - name: statefulset-name
                  value: "{{inputs.parameters.statefulset-name}}"
            dependencies:
              - patch-statefulset-to-0

          - name: run-backup
            template: run-backup
            inputs:
              parameters:
                - name: statefulset-name        
                - name: persistent-volume-claim-name
            arguments:
              parameters:
                - name: statefulset-name
                  value: "{{inputs.parameters.statefulset-name}}"
                - name: persistent-volume-claim-name
                  value: "{{inputs.parameters.persistent-volume-claim-name}}"
            dependencies:
              - wait-for-scale-to-0

          - name: delete-coreprotect-db
            template: delete-coreprotect-db
            inputs:
              parameters:
                - name: coreprotect-db-name
            arguments:
              parameters:
                - name: coreprotect-db-name
                  value: "{{inputs.parameters.coreprotect-db-name}}"
            dependencies:
              - wait-for-scale-to-0

          - name: patch-statefulset-to-1
            template: patch-statefulset-to-1
            inputs:
              parameters:
                - name: statefulset-name
            arguments:
              parameters:
                - name: statefulset-name
                  value: "{{inputs.parameters.statefulset-name}}"
            dependencies:
              - run-backup
              - delete-coreprotect-db

          - name: wait-for-scale-to-1
            template: wait-for-scale-to-1
            inputs:
              parameters:
                - name: statefulset-name
            arguments:
              parameters:
                - name: statefulset-name
                  value: "{{inputs.parameters.statefulset-name}}"
            dependencies:
              - patch-statefulset-to-1

    - name: get-timestamp
      script:
        image: mirror.gcr.io/alpine
        command: [sh]
        source: |
          echo $(date +%Y%m%d-%H%M%S)

    - name: patch-statefulset-to-0
      inputs:
        parameters:
          - name: statefulset-name
      script:
        image: mirror.gcr.io/bitnami/kubectl:1.33.1
        command: ["/bin/sh", "-c"]
        source: |
          kubectl patch statefulset {{inputs.parameters.statefulset-name}} -n seichi-minecraft --type='merge' -p '{"spec": {"replicas": 0}}'

    - name: wait-for-scale-to-0
      inputs:
        parameters:
          - name: statefulset-name
      script:
        image: mirror.gcr.io/bitnami/kubectl:1.33.1
        command: ["/bin/sh", "-c"]
        source: |
          echo "Waiting for statefulset to scale down..."
          while true; do
            replicas=$(kubectl get statefulset {{inputs.parameters.statefulset-name}} -n seichi-minecraft -o jsonpath='{.status.availableReplicas}')
            if [ -z "$replicas" ] || [ "$replicas" -eq 0 ]; then
              break
            fi
            echo "Still scaling down..."
            sleep 5
          done
          echo "Scale-down confirmed!"

    - name: run-backup
      inputs:
        parameters:
          - name: statefulset-name
          - name: persistent-volume-claim-name
      volumes:
        - name: backup-target-volume
          persistentVolumeClaim:
            claimName: "{{inputs.parameters.persistent-volume-claim-name}}"
        - name: pbs-tmpfs
      emptyDir: {}
      script:
        image: mirror.gcr.io/debian:12
        command: ["/bin/sh", "-c"]
        source: |
          set -e
          
          echo "Updating package lists..."
          apt update
          
          echo "Installing packages..."
          apt install -y curl
          
          echo "Adding Proxmox restore Client repository..."
          echo "deb http://download.proxmox.com/debian/pbs-client bookworm main" > /etc/apt/sources.list.d/pbs-client.list
          curl -fsSL https://enterprise.proxmox.com/debian/proxmox-release-bookworm.gpg -o /etc/apt/trusted.gpg.d/proxmox-release-bookworm.gpg
          
          echo "Updating package lists..."
          apt update
          
          echo "Installing proxmox-backup-client version 3.3.2-1..."
          apt install -y proxmox-backup-client=3.3.2-1
          
          echo "Running backup..."
          proxmox-backup-client backup "${BACKUP_NAME}" \
            --repository "${PBS_USER}@${PBS_HOST}:${PBS_DATASTORE}" \
            --backup-id "${BACKUP_ID}"
        env:
          - name: TZ
            value: "Asia/Tokyo"
          - name: BACKUP_NAME
            value: "data.pxar:/data"
          # proxmox-backup-server側でどのサーバのバックアップかを識別するためにサーバごとに異なるbackup-idを指定する
          - name: BACKUP_ID
            value: "{{inputs.parameters.statefulset-name}}"
          - name: PBS_USER
            valueFrom:
              secretKeyRef:
                name: pbs-credentials
                key: user
          - name: PBS_HOST
            valueFrom:
              secretKeyRef:
                name: pbs-credentials
                key: host
          - name: PBS_DATASTORE
            valueFrom:
              secretKeyRef:
                name: pbs-credentials
                key: datastore
          - name: PBS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: pbs-credentials
                key: password
          - name: PBS_FINGERPRINT
            valueFrom:
              secretKeyRef:
                name: pbs-credentials
                key: fingerprint
        volumeMounts:
          - name: backup-target-volume
            mountPath: /data
          # /root/.cache が overlayfs 配下だとスクリプトがこけるので O_TMPFILE フラグ付きの openat(2) が実行可能なファイルシステムをマウントする
          # refs: https://gist.github.com/unchama/0922fce3c490e46b6f9e822f4377853e
          - name: pbs-tmpfs
            mountPath: /root/.cache

    - name: delete-coreprotect-db
      inputs:
        parameters:
          - name: coreprotect-db-name
      script:
        image: mirror.gcr.io/mariadb:11.4
        env:
          - name: COREPROTECT_DB_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mariadb
                key: coreprotect-password
        command: ["/bin/sh", "-c"]
        # データベースを DROP -> CREATE するのは権限の関係でできないので、テーブルを TRUNCATE する
        source: |
          mariadb -hmariadb -ucoreprotect -p"${COREPROTECT_DB_USER_PASSWORD}" -Nse 'SHOW TABLES' -D {{inputs.parameters.coreprotect-db-name}} | 
            while read table; do mariadb -hmariadb -ucoreprotect -p"${COREPROTECT_DB_USER_PASSWORD}" -e "TRUNCATE TABLE $table" -D {{inputs.parameters.coreprotect-db-name}}; done

    - name: patch-statefulset-to-1
      inputs:
        parameters:
          - name: statefulset-name
      script:
        image: mirror.gcr.io/bitnami/kubectl:1.33.1
        command: ["/bin/sh", "-c"]
        source: |
          kubectl patch statefulset {{inputs.parameters.statefulset-name}} -n seichi-minecraft --type='merge' -p '{"spec": {"replicas": 1}}'

    - name: wait-for-scale-to-1
      inputs:
        parameters:
          - name: statefulset-name
      activeDeadlineSeconds: 300 # 5分待っても上がってこない場合は諦める
      script:
        image: mirror.gcr.io/bitnami/kubectl:1.33.1
        command: ["/bin/sh", "-c"]
        source: |
          echo "Waiting for StatefulSet to scale up..."
          while [ "$(kubectl get statefulset {{inputs.parameters.statefulset-name}} -n seichi-minecraft -o jsonpath='{.status.availableReplicas}')" != "1" ]; do
            echo "Still scaling up..."
            sleep 5
          done
          echo "Scale-up confirmed!"
